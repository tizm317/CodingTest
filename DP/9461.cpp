//#include <iostream>
//using namespace std;
//
//// 백준 문제 풀이
//// 날짜		: 2023. 06. 08. 목
//// 문제 번호	: #9461 
//// 문제 이름	: 파도반 수열
//// 알고리즘	: DP
//// 시간복잡도: O()
//
//int T;
//
//int main()
//{
//	ios_base::sync_with_stdio(false);
//	cin.tie(NULL);
//
//	// 이렇게 푸는 게 최선일까?????????????????????????????????/
//
//	//cin >> T;
//	//for (int i = 0; i < T; i++)
//	//{
//	//	int N;
//	//	cin >> N;
//
//	//	// 정삼각형 변의 길이 배열
//	//	long long P[105] = { 0, };
//
//	//	// 삼각형 남은 변의 개수
//	//	int D[105] = { 0, };
//
//	//	// 초기화
//	//	P[1] = 1; D[1] = 1;
//	//	P[2] = 1; D[2] = 1;
//	//	P[3] = 1; D[3] = 1;
//	//	P[4] = 2; D[4] = 1;
//	//	P[5] = 2; D[5] = 2;
//
//	//	for (int i = 6; i <= N; i++)
//	//	{
//	//		// 직전 정삼각형 변의 길이와 더해줄 j번째 정삼각형 찾기
//	//		int j = 0;
//	//		for (; j < i; j++)
//	//		{
//	//			if (D[j] > 0)
//	//				break;
//	//		}
//
//	//		// 직전 정삼각형 변의 길이 + j번째 정삼각형 변의 길이
//	//		P[i] = P[i - 1] + P[j];
//	//		// 새로 생긴 정삼각형의 남은 변의 개수는 항상 2(3개 중 1개는 이미 붙어있음)
//	//		D[i] = 2;
//
//	//		// 직전 정삼각형 변의 개수와 j번째 정삼각형 변의 개수 1개씩 감소
//	//		D[i - 1]--;
//	//		D[j]--;
//	//	}
//
//	//	cout << P[N] << '\n';
//	//}
//
//	
//	// Padovan 수열
//	// 1, 1, 1, 2, 2, 3, 4, 5, 7, 9
//
//	// D[i] = D[i-2] + D[i-3]
//	// 초기값 설정
//	// D[1] = D[2] = D[3] = 1;
//
//	cin >> T;
//	for (int i = 0; i < T; i++)
//	{
//		int N;
//		cin >> N;
//
//		long long D[105] = { 0, };
//		D[1] = D[2] = D[3] = 1;
//
//		for (int i = 4; i <= N; i++)
//			D[i] = D[i - 2] + D[i - 3];
//
//		cout << D[N] << '\n';
//	}
//
//	return 0;
//}